package kr.gagaotalk.client.authentication;

import kr.gagaotalk.core.Action;
import kr.gagaotalk.client.connection.Connection;
import kr.gagaotalk.client.connection.Received;
import kr.gagaotalk.core.DateConvert;
import kr.gagaotalk.core.HexDataConvert;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class Authentication {

    // Session ID
    private static final byte[] defaultSessionID = new byte[] {0};
    private static byte[] sessionID = defaultSessionID;
    public static byte[] getSessionID() {
        return sessionID;
    }

    // Sign In : saves session ID.
    public static Received signIn(String ID, String password) {
        final Map<String, Object> request = new HashMap<>();
        request.put("id", ID);
        request.put("password", password);

        Received received = Connection.communicate(Action.signIn, request);
        if (received.statusCode == 0)
            sessionID = HexDataConvert.HexStringToBytes((String) received.dataToDictionary().get("session_id"));
        return received;
    }

    // Sign Out: resets session ID.
    public static Received signOut() {
        final Map<String, Object> request = new HashMap<>();
        Received received = Connection.communicate(Action.signOut, request);
        if (received.statusCode == 0)
            sessionID = defaultSessionID;
        return received;
    }

    // Sign In: registration.
    public static Received signUp(String id, String nickname, String phoneNumber, Date birthday, String password) {
        final Map<String, Object> request = new HashMap<>();
        request.put("id", id);
        request.put("nickname", nickname);
        request.put("phoneNumber", phoneNumber);
        request.put("birthday", DateConvert.DateToString(birthday));
        request.put("password", password);
        return Connection.communicate(Action.signOut, request);
    }

    // Find ID: recover forgotten ID.
    public static String findID(String nickname, Date birthday) {
        final Map<String, Object> request = new HashMap<>();
        request.put("nickname", nickname);
        request.put("birthday", DateConvert.DateToString(birthday));

        Received rcvData = Connection.communicate(Action.findID, request);
        Map<String, Object> rcvMap = rcvData.dataToDictionary();

        if (rcvData.statusCode == 0) {
            return (String) rcvMap.get("user_id");
        } else {
            return null;
        }
    }

    // Find Password: recover forgotten password. returns temporary password generated by server.
    public static String findPassword(String id, String phoneNumber) {
        final Map<String, Object> request = new HashMap<>();
        request.put("id", id);
        request.put("phone_number",phoneNumber);

        Received rcvData = Connection.communicate(Action.findPW, request);
        Map<String, Object> rcvMap = rcvData.dataToDictionary();

        if (rcvData.statusCode == 0) {
            return (String) rcvMap.get("temporary_password");
        } else {
            return null;
        }
    }

    // Update Password: update password
    public static Received updateUserPassword(String prevPassword, String newPassword) {
        final Map<String, Object> request = new HashMap<>();
        request.put("previous_password", prevPassword);
        request.put("new_password", newPassword);
        return Connection.communicate(Action.upPW, request);
    }
}
