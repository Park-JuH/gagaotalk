Index: server/src/main/java/kr/gagaotalk/server/table/UserTable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.gagaotalk.server;\r\n\r\nimport java.sql.*;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\nimport java.security.SecureRandom;\r\n\r\npublic class UserTable extends Table{\r\n    public UserTable() { super(); } // just test\r\n    public UserTable(Connection con) { super(con); }\r\n    public UserTable(Connection con, String tableName) { super(con, tableName, schema, database); }\r\n    public static String schema = \"ID varchar(32) not null, password varchar(32) not null, nickname varchar(32), bio varchar(32), phoneNumber varchar(16) not null, birthday varchar(16) not null, primary key(ID)\";\r\n    public static String database = \"gagaotalkDB\";\r\n\r\n    // test result : no problem\r\n    // true : already exist false : does not exist\r\n    private boolean doesExistID(String userID) {\r\n        StringBuilder t = executeQuery(\"select exists (select * from \" + tableName + \" where id = '\" + userID + \"') as success;\", 1);\r\n        return t.toString().trim().equals(\"1\");\r\n    }\r\n\r\n    // test result : no problem\r\n    private boolean isValidBirthdayFormat(String birth) {\r\n        boolean t = true;\r\n        try {\r\n            SimpleDateFormat dtFormat = new SimpleDateFormat(\"yyyyMMdd\");\r\n            dtFormat.setLenient(false);\r\n            Date formatDate = dtFormat.parse(birth);\r\n            //LocalDate localDate2 = LocalDate.parse(\"birth\", DateTimeFormatter.ofPattern(\"yyyyMMdd\"));\r\n        } catch(ParseException e) {\r\n            t = false;\r\n        }\r\n        return t;\r\n    } // format : yyyymmdd\r\n\r\n    // test result : no problem\r\n    private String getPW(String userID) {\r\n        StringBuilder password = executeQuery(\"select password from \" + tableName + \" where id = '\" + userID + \"';\", 1);\r\n        return password.toString();\r\n    }\r\n\r\n    // test result : no problem\r\n    private String getRandomPassword(int temporaryPasswordSize) {\r\n        char[] charSet = new char[] {\r\n                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\r\n                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\r\n                'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\r\n                '!', '@', '#', '$', '%', '^', '&' };\r\n\r\n        StringBuilder sb = new StringBuilder();\r\n        SecureRandom sr = new SecureRandom();\r\n        sr.setSeed(new Date().getTime());\r\n\r\n        int idx = 0;\r\n        int len = charSet.length;\r\n        for (int i = 0; i < temporaryPasswordSize; i++) {\r\n            // idx = (int) (len * Math.random());\r\n            idx = sr.nextInt(len);\r\n            sb.append(charSet[idx]);\r\n        }\r\n\r\n        return sb.toString();\r\n    }\r\n\r\n    //test result : no problem\r\n    public String login(String inputtedUserID, String inputtedPW) {\r\n        StringBuilder password = executeQuery(\"select password from \" + tableName + \" where id = '\" + inputtedUserID + \"';\", 1);\r\n        if(password.length() == 0) { // doesn't exist inputted ID in table\r\n            return \"1\";\r\n        }\r\n        else {\r\n            if(inputtedPW.equals(password.toString().trim())) {\r\n                // login success\r\n                OnlineUserTable onlineUserTable = new OnlineUserTable(con, \"onlineUserTable\");\r\n                if(onlineUserTable.isOnline(inputtedUserID)) { // already online\r\n                    return \"2\";\r\n                }\r\n                else {\r\n                    onlineUserTable.insertOnlineTableLoginUser(inputtedUserID); // insert this account into onlineTable\r\n                }\r\n                return \"0\"; //success\r\n            }\r\n            else {\r\n                return \"1\"; //wrong password\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public String logout(String userID) {\r\n        OnlineUserTable onlineUserTable = new OnlineUserTable(con, \"onlineUserTable\");\r\n        if(onlineUserTable.isOnline(userID)) { // already online\r\n            onlineUserTable.deleteOnlineTableLogoutUser(userID);\r\n            return \"0\";\r\n        }\r\n        else {\r\n            // that userID is OFFLINE\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    // phone number format : no hyphen\r\n    // test check no problem\r\n    public String signup(String userID, String nickname, String phoneNumber, String birth, String password) {\r\n        // ********* need to add Error type : password security (8 over)\r\n        if(doesExistID(userID)) { return \"1\"; } //already exist ID\r\n        else {\r\n            if(!isValidBirthdayFormat(birth)) { return \"2\"; } //invalid birthday\r\n            if(nickname.isEmpty()) { return \"3\"; } //nickname is null\r\n            if(phoneNumber.length() != 11) { return \"4\"; }\r\n            try {\r\n                int phone = Integer.parseInt(phoneNumber);\r\n            } catch (NumberFormatException e) { return \"4\"; }\r\n            if(password.isEmpty()) { return \"5\"; } //password is null\r\n            executeUpdate(\"insert into \" + tableName + \" values ('\" + userID + \"', '\" + password + \"', '\" + nickname + \"', '', '\" + phoneNumber + \"', '\" + birth + \"' );\");\r\n        }\r\n        return \"0\"; // success\r\n    }\r\n\r\n    public String findID(String nickname, String birth) {\r\n        StringBuilder id = executeQuery(\"select id from \" + tableName + \" where nickname = '\" + nickname + \"' and birthday = '\" + birth + \"';\", 1);\r\n        if(id.toString().trim().equals(\"\")) { return \"1\"; } //does not exist\r\n        return id.toString(); // return id\r\n    }\r\n\r\n    public String findPW(String userID, String phoneNumber) {\r\n\r\n        if(!doesExistID(userID)) { return \"2\"; } // userID does not exist\r\n        StringBuilder password = executeQuery(\"select password from \" + tableName + \" where id = '\" + userID + \"' and phoneNumber = '\" + phoneNumber + \"';\", 1);\r\n        if(password.toString().trim().equals(\"\")) { return \"1\"; }\r\n        String tempPassword = getRandomPassword(12);\r\n        executeUpdate(\"update \" + tableName + \" set password = '\" + tempPassword + \"' where id = '\" + userID + \"';\");\r\n        return password.toString(); // return password in String (success)\r\n    }\r\n\r\n    // test result : no problem\r\n    public String updateUserInfo(String userID, String nickname, String birth, String bio) {\r\n        if(!isValidBirthdayFormat(birth)) { return \"1\"; }\r\n        if(nickname.isEmpty()) { return \"2\"; }\r\n        executeUpdate(\"update \" + tableName + \" set nickname = '\" + nickname + \"', birthday = '\" + birth + \"', bio = '\" + bio + \"' where id = '\" + userID + \"';\");\r\n        return \"0\"; //success\r\n    }\r\n\r\n    // test result : no problem\r\n    public String updatePassword(String userID, String inputtedCurrentPW, String newPW) {\r\n        String curPW = getPW(userID);\r\n        if(curPW.trim().equals(inputtedCurrentPW)) { // if same\r\n            executeUpdate(\"update \" + tableName + \" set password = '\" + newPW + \"' where id = '\" + userID + \"';\");\r\n            return \"0\"; // update success\r\n        }\r\n        else { return \"1\"; } // wrong password\r\n    }\r\n\r\n    // test result : no problem\r\n    //NOTE: order is userID, nickname, birthday, bio\r\n    public StringBuilder getUserInfo(String userID) {\r\n        if(doesExistID(userID)) {\r\n            StringBuilder IDError = new StringBuilder(\"1\");\r\n            return IDError;\r\n        }\r\n        ResultSet userInfoResultSet = null;\r\n        userInfoResultSet = executeQuery(\"select nickname, birthday, bio from \" + tableName + \" where id = '\" + userID + \"';\");\r\n        StringBuilder userInfo = new StringBuilder(\"\");\r\n        try {\r\n            if(userInfoResultSet.next()) {\r\n                userInfo.append(userID + \"\\n\");\r\n                userInfo.append(userInfoResultSet.getString(1) + \"\\n\");\r\n                userInfo.append(userInfoResultSet.getString(2) + \"\\n\");\r\n                userInfo.append(userInfoResultSet.getString(3) + \"\\n\");\r\n                //e.g. user11\\nddong\\n20021001\\n뿌직\\n\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return userInfo;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/kr/gagaotalk/server/table/UserTable.java b/server/src/main/java/kr/gagaotalk/server/table/UserTable.java
--- a/server/src/main/java/kr/gagaotalk/server/table/UserTable.java	(revision d02c22cb15966316f808eb1fb812b50d5688087e)
+++ b/server/src/main/java/kr/gagaotalk/server/table/UserTable.java	(date 1670937560401)
@@ -1,5 +1,7 @@
 package kr.gagaotalk.server;
 
+import kr.gagaotalk.server.table.Table;
+
 import java.sql.*;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
@@ -9,7 +11,7 @@
 import java.time.format.DateTimeParseException;
 import java.security.SecureRandom;
 
-public class UserTable extends Table{
+public class UserTable extends Table {
     public UserTable() { super(); } // just test
     public UserTable(Connection con) { super(con); }
     public UserTable(Connection con, String tableName) { super(con, tableName, schema, database); }
